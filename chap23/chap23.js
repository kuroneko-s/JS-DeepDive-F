const log = (...data) => console.log(...data);

/**
 * 소스코드마다 타입이 다른데 4가지가 있다.
 * 전역 코드 (global code) - 전역
 * 함수 코드 (function code) - 함수 내부
 * eval 코드 (eval code) - eval 함수의 인수
 * 모듈 코드 (module code) - 모듈 내부 ( 모듈 내부의 함수 클래스 등의 내부 코드는 제외 )
 */
// 왜 타입이 다르냐? 실행 컨텍스트 생성 방식이 다르니깐 다르지.

/**
 * 1. 전역 코드
 * var나 최상위 스코프, 전역 스코프를 생성하기 위해서 전역 실행 컨텍스트가 생성된다.
 */

/**
 * 2. 함수 코드
 * 지역 스코프를 생성하고 지역변수, 매개변수, arguments 객체 관리를 위해 함수 실행 컨텍스트가 생성된다.
 */

/**
 * 3. eval 코드
 * 자신만의 독자적인 스코프를 생성 ( 전역도, 지역 스코프도 아님 )
 */

/**
 * 4. 모듈 코드
 * 모듈별로 독립적인 모듈 스코프를 생성. 모듈 실행 컨텍스트가 생성된다.
 */

var x = 1;
// var x => 평가 단계에서 렉시컬 환경에 넣어두고
// x = 1이라는 결과를 위에서부터 순차적으로 코드를 해석하면서 x = 1이라는 결과에 도달한다.

/**
 * let, const는 전역객체의 프로퍼티가 아니고 개념적인 블록 내에 존재하게 된다.
 * 전역 객체와 let, const를 구분하기 위해서 LexicalEnviroment에는 ㅋObject Environment Record(var, 전역객체 등) 와 Declarative Environment Record(let, const)로 나뉘어져 있다.
 */
